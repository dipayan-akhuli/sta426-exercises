coord_fixed(ratio = 1) +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 20, ticks = FALSE))
rownames(correl) <- rownames(top_x)
pheatmap(as.matrix(correl), cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 1, cellheight = 1, fontsize_col = 8)
View(correl)
View(top_x)
top_x[,2:3]
correl
pheatmap(as.matrix(correl), cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 1, cellheight = 1, fontsize_col = 8)
colnames(correl) <- rownames(top_x)
pheatmap(as.matrix(correl), cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 1, cellheight = 1, fontsize_col = 8)
colnames(correl) <- rownames(top_x)
pheatmap(as.matrix(correl), cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 1, cellheight = 1, fontsize_col = 8)
colnames(correl) <- rownames(top_x)
pheatmap(as.matrix(correl), cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 1, cellheight = 1, fontsize_col = 8)
knitr::opts_chunk$set(echo = TRUE)
#| label: load-packages
#| include: false
library(ggplot2)
library(scales)
library(matrixStats)
library(reshape2)
library(pheatmap)
library(dendextend)
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
# reorder anno and x matrices to group similar samples consecutively
reord <- order(anno$Technology, anno$Treatment)
anno <- cbind(sample = 1:nrow(anno), anno[reord, ])
x <- rbind(sample = 1:nrow(anno), t(t(x)[reord, ]))
# repls stores number of replicates per sample
repls <- data.frame(matrix(0, length(unique(anno$Treatment)), length(unique(anno$Technology))))
rownames(repls) = unique(anno$Treatment)
colnames(repls) = unique(anno$Technology)
for (i in 1:nrow(repls)) {
for (j in 1:ncol(repls)) {
repls[i, j] <- sum(anno$Treatment == rownames(repls)[i] & anno$Technology == colnames(repls)[j])
}
}
repls
# num_genes stores number of expressed genes (expression value > 0) per sample
num_genes <- cbind(anno, data.frame(colSums(x[2:nrow(x),] != 0)))
colnames(num_genes)[ncol(num_genes)] = "num"
head(num_genes)
#| label: num-genes
ggplot(num_genes, aes(x = sample, y = num, fill = Technology, color = Treatment)) +
geom_col() +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Number of detected genes") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
sum_counts <- cbind(anno, data.frame(colSums(x[2:nrow(x),])))
colnames(sum_counts)[ncol(sum_counts)] = "sum_counts"
head(sum_counts)
#| label: sum-counts
ggplot(sum_counts, aes(x = sample, y = sum_counts, fill = Technology, color = Treatment)) +
geom_col() +
scale_y_continuous(
expand = c(0, 0),
trans = log10_trans()
) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Sum of counts") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# norm_x scales the columns such that each column sum is equal to the maximum of the column sums of x
norm_x <- rbind(sample = 1:nrow(anno), sweep(x[2:nrow(x),]*max(sum_counts$sum_counts), 2, t(sum_counts$sum_counts), "/"))
# log_x transforms the normalized data to log-scale
log_x <- rbind(sample = 1:nrow(anno), log1p(x[2:nrow(x),]))
# aggr_x contains expression data of all genes averaged over replicates for each sample
aggr_x <- data.frame(matrix(0, length(unique(anno$Treatment))*length(unique(anno$Technology)), nrow(log_x)-1))
colnames(aggr_x) = rownames(log_x[2:nrow(x),])
cats <- data.frame(Treatment = rep(rownames(repls), length(unique(anno$Technology))), Technology = rep(colnames(repls), each = length(unique(anno$Treatment))))
aggr_x <- cbind(cats, aggr_x)
for (i in 1:nrow(aggr_x)) {
aggr_x[i, 3:ncol(aggr_x)] <- rowMeans(log_x[2:nrow(log_x), (anno$Treatment == aggr_x$Treatment[i]) & (anno$Technology == aggr_x$Technology[i])])
}
# grp_x reshapes aggr_x for easy grouped violin plot
grp_x <- data.frame(matrix(0, (nrow(log_x)-1)*nrow(aggr_x), 4))
colnames(grp_x) = c(colnames(aggr_x)[1:2], "gene", "expr")
grp_x$Treatment <- rep(aggr_x$Treatment, nrow(log_x)-1)
grp_x$Technology <- rep(aggr_x$Technology, nrow(log_x)-1)
grp_x$gene <- rep(colnames(aggr_x)[3:ncol(aggr_x)], each = nrow(aggr_x))
grp_x$expr <- c(unname(as.matrix(aggr_x[, 3:ncol(aggr_x)])))
#| label: viol-expr-vals
ggplot(grp_x, aes(x = Technology, y = expr, fill = Treatment)) +
geom_violin() +
geom_boxplot(width = .05, outlier.colour = NA, position = position_dodge(width = 0.9)) +
labs(x = "Samples", y = "Expression values (scaled and transformed)") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# expr_vars contains variances in expression across samples for each gene
expr_vars <- as.data.frame(rowVars(as.matrix(log_x[2:nrow(log_x), ])))
colnames(expr_vars) = "expr_variance"
# top_vars sorts expr_vars in descending order and stores the 500 most variable genes
top_vars <- order(-as.matrix(expr_vars))[1:500]
#top_x contains expression data of 500 most variable genes
top_x <- cbind(anno, t(log_x[top_vars+1, ]))
# correl stores Pearson correlation coefficient between each sample
correl <- matrix(0, nrow(top_x), nrow(top_x))
for (i in 1:nrow(top_x)) {
for (j in 1:i) {
correl[i,j] <- cor(as.numeric(top_x[i,4:ncol(top_x)]), as.numeric(top_x[j,4:ncol(top_x)]))
}
}
# correl is converted to a symmetric dataframe for visualization
correl <- as.data.frame(correl + t(correl) - diag(diag(correl)))
colnames(correl) = 1:ncol(correl)
#| label: correl-expr-vals
melted_correl <- cbind(cond = rep(unname(paste0(top_x$Technology, '-', top_x$Treatment)), ncol(correl)), melt(cbind(sample = colnames(correl), correl), id.vars = "sample"))
ggplot(melted_correl, aes(x = factor(sample, level = rownames(correl)), y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name= "Correlation") +
theme_bw() +
theme(
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 9, vjust = 1, hjust = 1),
axis.text.x = element_text(angle = 90, size = 9, vjust = 1, hjust = 1)) +
geom_vline(xintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
geom_hline(yintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
coord_fixed(ratio = 1) +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 20, ticks = FALSE))
# hc_x stores hierarchical clusters of samples calculated using Euclidean distance
hc_x <- hclust(dist(top_x[, 4:ncol(top_x)]))
hc_x[["labels"]] <- unname(paste0(top_x$Technology, '-', top_x$Treatment))
#| label: hclust
par(mar = c(9, 4.1, 4.1, 2.1), cex = 0.35)
plot(as.dendrogram(hc_x))
mtext(side = 1, text = "Samples", line = 7, cex = 0.6)
mtext(side = 2, text = "Cluster distances", line = 2.5, cex = 0.6)
# heatmap of normalized and transformed expression values of all genes per sample
# genes are also clustered hierarchically based on Euclidean distance between expression values
#| label: heatmap
#| fig-height: 20
pheatmap(t(as.matrix(top_x[, 4:ncol(top_x)])), cluster_rows = hclust(dist(t(top_x[, 4:ncol(top_x)]))), cluster_cols = hc_x,  show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 4, cellheight = 0.9)
#| label: correl-expr-vals
melted_correl <- cbind(cond = rep(unname(paste0(top_x$Technology, '-', top_x$Treatment)), ncol(correl)), melt(cbind(sample = colnames(correl), correl), id.vars = "sample"))
ggplot(melted_correl, aes(x = factor(sample, level = rownames(correl)), y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name= "Correlation") +
theme_bw() +
theme(
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank()) +
geom_vline(xintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
geom_hline(yintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
coord_fixed(ratio = 1) +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 20, ticks = FALSE))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load-packages
#| label: load-packages
#| include: false
library(ggplot2)
library(scales)
library(matrixStats)
library(reshape2)
library(pheatmap)
library(dendextend)
# Chunk 3
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
# Chunk 4
# reorder anno and x matrices to group similar samples consecutively
reord <- order(anno$Technology, anno$Treatment)
anno <- cbind(sample = 1:nrow(anno), anno[reord, ])
x <- rbind(sample = 1:nrow(anno), t(t(x)[reord, ]))
# repls stores number of replicates per sample
repls <- data.frame(matrix(0, length(unique(anno$Treatment)), length(unique(anno$Technology))))
rownames(repls) = unique(anno$Treatment)
colnames(repls) = unique(anno$Technology)
for (i in 1:nrow(repls)) {
for (j in 1:ncol(repls)) {
repls[i, j] <- sum(anno$Treatment == rownames(repls)[i] & anno$Technology == colnames(repls)[j])
}
}
repls
# Chunk 5
# num_genes stores number of expressed genes (expression value > 0) per sample
num_genes <- cbind(anno, data.frame(colSums(x[2:nrow(x),] != 0)))
colnames(num_genes)[ncol(num_genes)] = "num"
head(num_genes)
# Chunk 6: num-genes
#| label: num-genes
ggplot(num_genes, aes(x = sample, y = num, fill = Technology, color = Treatment)) +
geom_col() +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Number of detected genes") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 7
sum_counts <- cbind(anno, data.frame(colSums(x[2:nrow(x),])))
colnames(sum_counts)[ncol(sum_counts)] = "sum_counts"
head(sum_counts)
# Chunk 8: sum-counts
#| label: sum-counts
ggplot(sum_counts, aes(x = sample, y = sum_counts, fill = Technology, color = Treatment)) +
geom_col() +
scale_y_continuous(
expand = c(0, 0),
trans = log10_trans()
) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Sum of counts") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 9
# norm_x scales the columns such that each column sum is equal to the maximum of the column sums of x
norm_x <- rbind(sample = 1:nrow(anno), sweep(x[2:nrow(x),]*max(sum_counts$sum_counts), 2, t(sum_counts$sum_counts), "/"))
# Chunk 10
# log_x transforms the normalized data to log-scale
log_x <- rbind(sample = 1:nrow(anno), log1p(x[2:nrow(x),]))
# Chunk 11
# aggr_x contains expression data of all genes averaged over replicates for each sample
aggr_x <- data.frame(matrix(0, length(unique(anno$Treatment))*length(unique(anno$Technology)), nrow(log_x)-1))
colnames(aggr_x) = rownames(log_x[2:nrow(x),])
cats <- data.frame(Treatment = rep(rownames(repls), length(unique(anno$Technology))), Technology = rep(colnames(repls), each = length(unique(anno$Treatment))))
aggr_x <- cbind(cats, aggr_x)
for (i in 1:nrow(aggr_x)) {
aggr_x[i, 3:ncol(aggr_x)] <- rowMeans(log_x[2:nrow(log_x), (anno$Treatment == aggr_x$Treatment[i]) & (anno$Technology == aggr_x$Technology[i])])
}
# grp_x reshapes aggr_x for easy grouped violin plot
grp_x <- data.frame(matrix(0, (nrow(log_x)-1)*nrow(aggr_x), 4))
colnames(grp_x) = c(colnames(aggr_x)[1:2], "gene", "expr")
grp_x$Treatment <- rep(aggr_x$Treatment, nrow(log_x)-1)
grp_x$Technology <- rep(aggr_x$Technology, nrow(log_x)-1)
grp_x$gene <- rep(colnames(aggr_x)[3:ncol(aggr_x)], each = nrow(aggr_x))
grp_x$expr <- c(unname(as.matrix(aggr_x[, 3:ncol(aggr_x)])))
# Chunk 12: viol-expr-vals
#| label: viol-expr-vals
ggplot(grp_x, aes(x = Technology, y = expr, fill = Treatment)) +
geom_violin() +
geom_boxplot(width = .05, outlier.colour = NA, position = position_dodge(width = 0.9)) +
labs(x = "Samples", y = "Expression values (scaled and transformed)") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 13
# expr_vars contains variances in expression across samples for each gene
expr_vars <- as.data.frame(rowVars(as.matrix(log_x[2:nrow(log_x), ])))
colnames(expr_vars) = "expr_variance"
# top_vars sorts expr_vars in descending order and stores the 500 most variable genes
top_vars <- order(-as.matrix(expr_vars))[1:500]
#top_x contains expression data of 500 most variable genes
top_x <- cbind(anno, t(log_x[top_vars+1, ]))
# Chunk 14
# correl stores Pearson correlation coefficient between each sample
correl <- matrix(0, nrow(top_x), nrow(top_x))
for (i in 1:nrow(top_x)) {
for (j in 1:i) {
correl[i,j] <- cor(as.numeric(top_x[i,4:ncol(top_x)]), as.numeric(top_x[j,4:ncol(top_x)]))
}
}
# correl is converted to a symmetric dataframe for visualization
correl <- as.data.frame(correl + t(correl) - diag(diag(correl)))
colnames(correl) = 1:ncol(correl)
# Chunk 15: correl-expr-vals
#| label: correl-expr-vals
melted_correl <- cbind(cond = rep(unname(paste0(top_x$Technology, '-', top_x$Treatment)), ncol(correl)), melt(cbind(sample = colnames(correl), correl), id.vars = "sample"))
ggplot(melted_correl, aes(x = factor(sample, level = rownames(correl)), y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name= "Correlation") +
theme_bw() +
theme(
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank()) +
geom_vline(xintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
geom_hline(yintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
coord_fixed(ratio = 1) +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 20, ticks = FALSE))
# Chunk 16
# hc_x stores hierarchical clusters of samples calculated using Euclidean distance
hc_x <- hclust(dist(top_x[, 4:ncol(top_x)]))
hc_x[["labels"]] <- unname(paste0(top_x$Technology, '-', top_x$Treatment))
# Chunk 17: hclust
#| label: hclust
par(mar = c(9, 4.1, 4.1, 2.1), cex = 0.35)
plot(as.dendrogram(hc_x))
mtext(side = 1, text = "Samples", line = 7, cex = 0.6)
mtext(side = 2, text = "Cluster distances", line = 2.5, cex = 0.6)
# Chunk 18: heatmap
# heatmap of normalized and transformed expression values of all genes per sample
# genes are also clustered hierarchically based on Euclidean distance between expression values
#| label: heatmap
#| fig-height: 20
pheatmap(t(as.matrix(top_x[, 4:ncol(top_x)])), cluster_rows = hclust(dist(t(top_x[, 4:ncol(top_x)]))), cluster_cols = hc_x,  show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 4, cellheight = 0.9)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load-packages
#| label: load-packages
#| include: false
library(ggplot2)
library(scales)
library(matrixStats)
library(reshape2)
library(pheatmap)
library(dendextend)
# Chunk 3
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
# Chunk 4
# reorder anno and x matrices to group similar samples consecutively
reord <- order(anno$Technology, anno$Treatment)
anno <- cbind(sample = 1:nrow(anno), anno[reord, ])
x <- rbind(sample = 1:nrow(anno), t(t(x)[reord, ]))
# repls stores number of replicates per sample
repls <- data.frame(matrix(0, length(unique(anno$Treatment)), length(unique(anno$Technology))))
rownames(repls) = unique(anno$Treatment)
colnames(repls) = unique(anno$Technology)
for (i in 1:nrow(repls)) {
for (j in 1:ncol(repls)) {
repls[i, j] <- sum(anno$Treatment == rownames(repls)[i] & anno$Technology == colnames(repls)[j])
}
}
repls
# Chunk 5
# num_genes stores number of expressed genes (expression value > 0) per sample
num_genes <- cbind(anno, data.frame(colSums(x[2:nrow(x),] != 0)))
colnames(num_genes)[ncol(num_genes)] = "num"
head(num_genes)
# Chunk 6: num-genes
#| label: num-genes
ggplot(num_genes, aes(x = sample, y = num, fill = Technology, color = Treatment)) +
geom_col() +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Number of detected genes") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 7
sum_counts <- cbind(anno, data.frame(colSums(x[2:nrow(x),])))
colnames(sum_counts)[ncol(sum_counts)] = "sum_counts"
head(sum_counts)
# Chunk 8: sum-counts
#| label: sum-counts
ggplot(sum_counts, aes(x = sample, y = sum_counts, fill = Technology, color = Treatment)) +
geom_col() +
scale_y_continuous(
expand = c(0, 0),
trans = log10_trans()
) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Samples", y = "Sum of counts") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 9
# norm_x scales the columns such that each column sum is equal to the maximum of the column sums of x
norm_x <- rbind(sample = 1:nrow(anno), sweep(x[2:nrow(x),]*max(sum_counts$sum_counts), 2, t(sum_counts$sum_counts), "/"))
# Chunk 10
# log_x transforms the normalized data to log-scale
log_x <- rbind(sample = 1:nrow(anno), log1p(x[2:nrow(x),]))
# Chunk 11
# aggr_x contains expression data of all genes averaged over replicates for each sample
aggr_x <- data.frame(matrix(0, length(unique(anno$Treatment))*length(unique(anno$Technology)), nrow(log_x)-1))
colnames(aggr_x) = rownames(log_x[2:nrow(x),])
cats <- data.frame(Treatment = rep(rownames(repls), length(unique(anno$Technology))), Technology = rep(colnames(repls), each = length(unique(anno$Treatment))))
aggr_x <- cbind(cats, aggr_x)
for (i in 1:nrow(aggr_x)) {
aggr_x[i, 3:ncol(aggr_x)] <- rowMeans(log_x[2:nrow(log_x), (anno$Treatment == aggr_x$Treatment[i]) & (anno$Technology == aggr_x$Technology[i])])
}
# grp_x reshapes aggr_x for easy grouped violin plot
grp_x <- data.frame(matrix(0, (nrow(log_x)-1)*nrow(aggr_x), 4))
colnames(grp_x) = c(colnames(aggr_x)[1:2], "gene", "expr")
grp_x$Treatment <- rep(aggr_x$Treatment, nrow(log_x)-1)
grp_x$Technology <- rep(aggr_x$Technology, nrow(log_x)-1)
grp_x$gene <- rep(colnames(aggr_x)[3:ncol(aggr_x)], each = nrow(aggr_x))
grp_x$expr <- c(unname(as.matrix(aggr_x[, 3:ncol(aggr_x)])))
# Chunk 12: viol-expr-vals
#| label: viol-expr-vals
ggplot(grp_x, aes(x = Technology, y = expr, fill = Treatment)) +
geom_violin() +
geom_boxplot(width = .05, outlier.colour = NA, position = position_dodge(width = 0.9)) +
labs(x = "Samples", y = "Expression values (scaled and transformed)") +
theme_bw() +
theme(
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = +3),
panel.border = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5, lineend = "square")
)
# Chunk 13
# expr_vars contains variances in expression across samples for each gene
expr_vars <- as.data.frame(rowVars(as.matrix(log_x[2:nrow(log_x), ])))
colnames(expr_vars) = "expr_variance"
# top_vars sorts expr_vars in descending order and stores the 500 most variable genes
top_vars <- order(-as.matrix(expr_vars))[1:500]
#top_x contains expression data of 500 most variable genes
top_x <- cbind(anno, t(log_x[top_vars+1, ]))
# Chunk 14
# correl stores Pearson correlation coefficient between each sample
correl <- matrix(0, nrow(top_x), nrow(top_x))
for (i in 1:nrow(top_x)) {
for (j in 1:i) {
correl[i,j] <- cor(as.numeric(top_x[i,4:ncol(top_x)]), as.numeric(top_x[j,4:ncol(top_x)]))
}
}
# correl is converted to a symmetric dataframe for visualization
correl <- as.data.frame(correl + t(correl) - diag(diag(correl)))
colnames(correl) = 1:ncol(correl)
# Chunk 15: correl-expr-vals
#| label: correl-expr-vals
melted_correl <- cbind(cond = rep(unname(paste0(top_x$Technology, '-', top_x$Treatment)), ncol(correl)), melt(cbind(sample = colnames(correl), correl), id.vars = "sample"))
ggplot(melted_correl, aes(x = factor(sample, level = rownames(correl)), y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name= "Correlation") +
theme_bw() +
theme(
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank()) +
geom_vline(xintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
geom_hline(yintercept = c(0.5, cumsum(as.numeric(unlist(repls)))+0.5), colour="black", linewidth = 0.3) +
coord_fixed(ratio = 1) +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 20, ticks = FALSE))
# Chunk 16
# hc_x stores hierarchical clusters of samples calculated using Euclidean distance
hc_x <- hclust(dist(top_x[, 4:ncol(top_x)]))
hc_x[["labels"]] <- unname(paste0(top_x$Technology, '-', top_x$Treatment))
# Chunk 17: hclust
#| label: hclust
par(mar = c(9, 4.1, 4.1, 2.1), cex = 0.35)
plot(as.dendrogram(hc_x))
mtext(side = 1, text = "Samples", line = 7, cex = 0.6)
mtext(side = 2, text = "Cluster distances", line = 2.5, cex = 0.6)
# Chunk 18: heatmap
# heatmap of normalized and transformed expression values of all genes per sample
# genes are also clustered hierarchically based on Euclidean distance between expression values
#| label: heatmap
#| fig-height: 20
pheatmap(t(as.matrix(top_x[, 4:ncol(top_x)])), cluster_rows = hclust(dist(t(top_x[, 4:ncol(top_x)]))), cluster_cols = hc_x,  show_rownames = FALSE, show_colnames = FALSE, annotation_col = top_x[,2:3], cellwidth = 4, cellheight = 0.9)
View(top_x)
View(top_x)
View(melted_correl)
